@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

@inject ChinookContext DbContext

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <h1>Artists</h1>
    <Loading />
}
else
{
    <h1>Artists</h1>
    <input type="text" class="form-control w-25" @bind="@SearchText" @oninput="FilterArtists" placeholder="Search artist by name" />
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    private string SearchText = "";
    private List<Artist> FilteredArtists = new List<Artist>();

    private void FilterArtists(ChangeEventArgs e)
    {
        SearchText = e.Value.ToString();
        FilteredArtists = Artists.Where(artist =>
            string.IsNullOrEmpty(SearchText) || artist.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
        FilteredArtists = Artists;
    }

    public async Task<List<Artist>> GetArtists()
    {   
        var users = DbContext.Users.Include(a => a.UserPlaylists).ToList();

        return DbContext.Artists.Include(art => art.Albums).ToList();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        return DbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }
}
