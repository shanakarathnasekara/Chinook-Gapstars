@page "/artist/{ArtistId:long}"
@using Chinook.ClientModels;
@using Chinook.Services.Tracks;
@using Chinook.Services.Artists;
@using Chinook.Services.EventsStreaming;
@using Chinook.Services.Playlist;
@using System.Security.Claims;
@using Chinook.Services.Users;
@attribute [Authorize]

@inject IPlaylistService playListService;
@inject IArtistService artistService;
@inject ITrackService trackService;
@inject IUserService userService;
@inject EventsService eventsService;
@inject ILogger<ArtistPage> logger;

<AlertBox infoMessage="@_infoMessage" errorMessage="@_errorMessage"></AlertBox>

@if (_artistData == null)
{
    <Loading />
}
else
{
    <h1>@_artistData.ArtistName</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in _tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal _playlistDialog { get; set; }

    private List<PlaylistTrack> _tracks;
    private PlaylistTrack _selectedTrack;
    private List<ClientModels.Playlist> _playListData;
    private ClientModels.Artist _artistData;
    private string _infoMessage = "";
    private string _errorMessage = "";
    private string _currentUserId = "";
    private string _newPlaylist = "";
    private string _dropDownSelection = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InvokeAsync(StateHasChanged);
            ClaimsPrincipal user = (await authenticationState).User;
            _currentUserId = userService.GetUserId(user);

            // Load initial data
            _artistData = (await artistService.GetArtistsFromDb()).SingleOrDefault(a => a.ArtistId == ArtistId);
            _tracks = await trackService.RetrieveTracksList(_artistData.ArtistId, _currentUserId);
            _playListData = await playListService.RetrieveUsersListofPlaylist(_currentUserId);
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            await DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }

    }

    private async Task FavoriteTrack(long trackId)
    {
        try
        {
            Track track = await playListService.AddTrackToFavorites(trackId, _currentUserId);
            _tracks = await trackService.RetrieveTracksList(_artistData.ArtistId, _currentUserId);
            _infoMessage = $"Track {track.Album.Artist.Name} - {track.Album.Title} - {track.Name} added to playlist Favorites.";
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            await DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }        

    }

    private async Task UnfavoriteTrack(long trackId)
    {
        try
        {
            Track track = await playListService.RemoveTrackFromFavorites(trackId, _currentUserId);
            _tracks = await trackService.RetrieveTracksList(_artistData.ArtistId, _currentUserId);
            _infoMessage = $"Track {track.Album.Artist.Name} - {track.Album.Title} - {track.Name} removed from playlist Favorites.";
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            await DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        _selectedTrack = _tracks.FirstOrDefault(t => t.TrackId == trackId);
        _newPlaylist = "";
        _playlistDialog.Open();
    }

    private async void AddTrackToPlaylist()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_newPlaylist))
            {
                if (string.IsNullOrWhiteSpace(_dropDownSelection) && _playListData.Count() == 0)
                {
                    _playlistDialog.Close();
                    await DisplayErrorMessage("Playlist name cannot be empty. Add a valid new playlist name.");
                    return;
                }

                if (string.IsNullOrWhiteSpace(_dropDownSelection) && _playListData.Count() != 0)
                {
                    _dropDownSelection = _playListData.FirstOrDefault().Name;
                }

                await playListService.AddTrackToPlaylist(_selectedTrack, _dropDownSelection, _currentUserId);
            }
            else
            {
                await playListService.AddNewPlaylist(_selectedTrack, _newPlaylist, _currentUserId);
                _playListData = await playListService.RetrieveUsersListofPlaylist(_currentUserId);
                eventsService.UpdatePlaylistItemAddedEvent();
            }

            string playListName = _newPlaylist != "" ? _newPlaylist : _dropDownSelection;

            CloseInfoMessage();
            CloseErrorMessage();

            _playlistDialog.Close();
            _infoMessage = $"Track {_artistData.ArtistName} - {_selectedTrack.AlbumTitle} - {_selectedTrack.TrackName} added to playlist {playListName}.";
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            _playlistDialog.Close();
            await DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }        
    }

    public async void AddTrackToPlaylistDropdown(string playlistName)
    {
        _dropDownSelection = playlistName;
    }

    private void CloseInfoMessage()
    {
        _infoMessage = "";
    }

    private async Task DisplayErrorMessage(string errorMsg)
    {
        _errorMessage = $"{errorMsg}";
        await Task.Delay(4000);
        _errorMessage = "";
        StateHasChanged();
    }

    private void CloseErrorMessage()
    {
        _errorMessage = "";
    }    
}

<Modal @ref="_playlistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (_selectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@_artistData.ArtistName - @_selectedTrack.AlbumTitle - @_selectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="@(e => AddTrackToPlaylistDropdown(e.Value.ToString()))">
                @if (_playListData.Any())
                {
                    foreach (var playlist in _playListData)
                    {
                        <option value="@playlist.Name">@playlist.Name</option>
                    }
                }
                else
                {
                    <option disabled selected>No existing playlists.Create new playlist.</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="@_newPlaylist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
