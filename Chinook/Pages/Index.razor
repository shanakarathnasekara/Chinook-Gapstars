@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services.Albums;
@using Chinook.Services.Artists;
@using Microsoft.EntityFrameworkCore

@inject IArtistService artistService; 
@inject IAlbumService  albumService;

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (_artists == null)
{
    <Loading />
}
else
{
    <input type="text" class="form-control w-25" @bind="@_searchText" @oninput="FilterArtistsBasedonSearchText" placeholder="Search artist by name" />
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @if (_filteredArtists == null || _filteredArtists.Count == 0)
            {
                <tr>
                    <td colspan="2">No artists found</td>
                </tr>
            }
            else
            {
                @foreach (var artist in _filteredArtists)
                {
                    <tr>
                        <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                        <td>@artist.Albums.Count()</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> _artists = new List<Artist>();
    private string _searchText = "";
    private List<Artist> _filteredArtists = new List<Artist>();

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        _artists = await GetArtists();
        _filteredArtists = _artists;
    }

    public async Task<List<Artist>> GetArtists()
    {
        return await artistService.GetArtistsFromDb();
    }

    public async Task<List<Album>> GetAlbumsForArtist(long artistId)
    {
        return await albumService.GetAlbumsFromDb(artistId);
    }

    // Filter artist list based on search text
    private void FilterArtistsBasedonSearchText(ChangeEventArgs e)
    {
        _searchText = e.Value.ToString();
        _filteredArtists = _artists.Where(artist =>
            string.IsNullOrEmpty(_searchText) || artist.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }
}
