@page "/artist/{ArtistId:long}"
@using Chinook.ClientModels;
@using Chinook.Models;
@using Chinook.Services.Artists;
@using Chinook.Services.EventsStreaming;
@using Chinook.Services.Playlist;
@using System.Security.Claims;
@attribute [Authorize]

@inject IPlaylistService playListService;
@inject IArtistService artistService;
@inject EventsService eventsService;

@if (!string.IsNullOrWhiteSpace(_infoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_infoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <div class="alert alert-danger fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_errorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseErrorMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal _playlistDialog { get; set; }

    public Artist Artist;
    private List<PlaylistTrack> Tracks;
    private PlaylistTrack _selectedTrack;
    private string _infoMessage;
    private string _errorMessage;
    private string _currentUserId;
    public string NewPlaylist = "";
    public List<Chinook.Models.Playlist> PlaylistData;
    public string DropDownSelection = "";

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        _currentUserId = await GetUserId();

        // Load initial data
        Artist = (await artistService.GetArtistsFromDb()).SingleOrDefault(a => a.ArtistId == ArtistId);
        Tracks = await playListService.RetrieveTracksList(Artist.ArtistId, _currentUserId);
        PlaylistData = await playListService.RetrieveUsersListofPlaylist(_currentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        Track track = await playListService.AddTrackToFavorites(trackId, _currentUserId);

        Tracks = await playListService.RetrieveTracksList(Artist.ArtistId, _currentUserId);

        _infoMessage = $"Track {track.Album.Artist.Name} - {track.Album.Title} - {track.Name} added to playlist Favorites.";

    }

    private async Task UnfavoriteTrack(long trackId)
    {
        Track track = await playListService.RemoveTrackFromFavorites(trackId, _currentUserId);

        Tracks = await playListService.RetrieveTracksList(Artist.ArtistId, _currentUserId);

        _infoMessage = $"Track {track.Album.Artist.Name} - {track.Album.Title} - {track.Name} removed from playlist Favorites.";

    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        _selectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        NewPlaylist = "";
        _playlistDialog.Open();
    }

    private async void AddTrackToPlaylist()
    {
        if (NewPlaylist == "")
        {
            if (DropDownSelection == "" && PlaylistData.Count() == 0)
            {
                _errorMessage = "Playlist name cannot be empty. Add a valid new playlistname.";
                _playlistDialog.Close();
                return;
            }

            if (DropDownSelection == "" && PlaylistData.Count() != 0)
            {
                DropDownSelection = PlaylistData.FirstOrDefault().Name;
            }

            await playListService.AddTrackToPlaylist(_selectedTrack, DropDownSelection, _currentUserId);
        } 
        else
        {
            await playListService.AddNewPlaylist(_selectedTrack, NewPlaylist, _currentUserId);
            eventsService.UpdatePlaylistItemAddedEvent();
        }

        string playListName = NewPlaylist != "" ? NewPlaylist : DropDownSelection;

        CloseInfoMessage();
        CloseErrorMessage();

        _infoMessage = $"Track {Artist.Name} - {_selectedTrack.AlbumTitle} - {_selectedTrack.TrackName} added to playlist {playListName}.";
        _playlistDialog.Close();
    }

    public async void AddTrackToPlaylistDropdown(string playlistName)
    {
        DropDownSelection = playlistName;
    }

    private void CloseInfoMessage()
    {
        _infoMessage = "";
    }

    private void CloseErrorMessage()
    {
        _errorMessage = "";
    }
}

<Modal @ref="_playlistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (_selectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @_selectedTrack.AlbumTitle - @_selectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="@(e => AddTrackToPlaylistDropdown(e.Value.ToString()))">
                @if (PlaylistData.Any())
                {
                    foreach (var playlist in PlaylistData)
                    {
                        <option value="@playlist.Name">@playlist.Name</option>
                    }
                }
                else
                {
                    <option disabled selected>No existing playlists.Create new playlist.</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="@NewPlaylist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
