@page "/"
@attribute [Authorize]

@using Chinook.Common.Models;
@using Chinook.Models
@using Chinook.Services.Albums;
@using Chinook.Services.Artists;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging;

@inject IArtistService artistService; 
@inject IAlbumService  albumService;
@inject ILogger<Index> logger;


<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@*Error message alert box*@
@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <div class="alert alert-danger fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_errorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseErrorMessage"></button>
        </div>
    </div>
}

@if (_artistsData == null)
{
    <Loading />
}
else
{
    <input type="text" class="form-control w-25" @bind="@_searchText" @oninput="FilterArtistsBasedonSearchText" placeholder="Search artist by name" />
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @if (_filteredArtistsData == null || _filteredArtistsData.Count == 0)
            {
                <tr>
                    <td colspan="2">No artists found</td>
                </tr>
            }
            else
            {
                @foreach (var artist in _filteredArtistsData)
                {
                    <tr>
                        <td><a href="Artist/@artist.ArtistId">@artist.ArtistName</a></td>
                        <td>@artist.Albums?.Count()</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<ClientModels.Artist> _artistsData = new List<ClientModels.Artist>();
    private List<ClientModels.Artist> _filteredArtistsData = new List<ClientModels.Artist>();
    private string _searchText = "";
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync() {
        try
        {
            await InvokeAsync(StateHasChanged);
            _artistsData = await GetArtists();
            _filteredArtistsData = _artistsData;
            logger.LogInformation("Index page intitialized");
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            await DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }
    }

    //Retrieve artists from DB
    public async Task<List<ClientModels.Artist>> GetArtists()
    {
        var artists = new List<ClientModels.Artist>();
        try
        {
            artists = await artistService.GetArtistsFromDb();
        } 
        catch(CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            await DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }
        return artists;
    }

    // Filter artist list based on search text
    private void FilterArtistsBasedonSearchText(ChangeEventArgs e)
    {
        _searchText = e.Value.ToString();
        logger.LogInformation($"Triggering artist filter for search text: {_searchText}");
        _filteredArtistsData = _artistsData.Where(artist =>
            string.IsNullOrEmpty(_searchText) || artist.ArtistName.Contains(_searchText, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    private async Task DisplayErrorMessage(string errorMsg)
    {
        _errorMessage = $"{errorMsg}";
        await Task.Delay(3000);
        _errorMessage = "";
        StateHasChanged();
    }

    private void CloseErrorMessage()
    {
        _errorMessage = "";
    }
}
