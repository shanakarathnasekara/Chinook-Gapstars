@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.Common.Models;
@using Chinook.Models
@using Chinook.Services.Playlist;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@inject IPlaylistService playListService;
@inject ILogger<PlaylistPage> logger;

<h1>Playlist <strong>@_playlist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(_infoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_infoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <div class="alert alert-danger fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_errorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseErrorMessage"></button>
        </div>
    </div>
}

@if (_playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th>Actions</th>
        </tr>
        </thead>
        <tbody>
            @if (_playlist.Tracks == null || _playlist.Tracks.Count == 0)
            {
                <tr>
                    <td colspan="2">No tracks found</td>
                </tr>
            }
            else
            {
                @foreach (var track in _playlist.Tracks)
                {
                    <tr>
                        <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                        <td>
                            <div class="d-flex">
                                @if (_playlist.Name != "Favorites")
                                {
                                    @if (track.IsFavorite)
                                    {
                                        <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                    }
                                    else
                                    {
                                        <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                    }

                                }
                                <a href="#" class="m-1 pl-3" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId, _playlist.Name))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private ClientModels.Playlist _playlist;
    private string _currentUserId;
    private string _infoMessage;
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _currentUserId = await GetUserId();
            await InvokeAsync(StateHasChanged);
            _playlist = await playListService.RetrieveSpecificPlaylist(PlaylistId, _currentUserId);

        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }        
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _playlist = await playListService.RetrieveSpecificPlaylist(PlaylistId, _currentUserId);
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }
    }

    private async Task<string> GetUserId()
    {
        string userId = "";
        try
        {
            var user = (await authenticationState).User;
            userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }        
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        try
        {
            var track = await playListService.AddTrackToFavorites(trackId, _currentUserId);
            _playlist = await playListService.RetrieveSpecificPlaylist(PlaylistId, _currentUserId);
            _infoMessage = $"Track {track.Album.Artist.Name} - {track.Album.Title} - {track.Name} added to playlist Favorites.";
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }        
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        try
        {
            var track = await playListService.RemoveTrackFromFavorites(trackId, _currentUserId);
            _playlist = await playListService.RetrieveSpecificPlaylist(PlaylistId, _currentUserId);
            _infoMessage = $"Track {track.Album.Artist.Name} - {track.Album.Title} - {track.Name} removed from playlist Favorites.";
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }        
    }

    private async void RemoveTrack(long trackId, string playlistName)
    {
        try
        {
            await playListService.RemoveTrackFromPlaylist(trackId, playlistName, _currentUserId);
            _playlist = await playListService.RetrieveSpecificPlaylist(PlaylistId, _currentUserId);
            CloseInfoMessage();
        }
        catch (CustomException ex)
        {
            logger.LogError(ex.CustomMessage);
            DisplayErrorMessage(ex.CustomMessage);
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message?.ToString());
        }        
    }

    private void CloseInfoMessage()
    {
        _infoMessage = "";
    }

    private async Task DisplayErrorMessage(string errorMsg)
    {
        _errorMessage = $"{errorMsg}";
        await Task.Delay(3000);
        _errorMessage = "";
        StateHasChanged();
    }

    private void CloseErrorMessage()
    {
        _errorMessage = "";
    }

}
